# Bonus 0

## Analysis

## Attack type: Buffer overflow

We decompiled the binary, but it was very difficult to understand the full binary. We used Dogbolt (an online decompiler) to open it with different decompilation tools. We understood that it combines two buffers. After adding the first buffer, the script removes the \0 from the final buffer, then uses strcat. This is not a good idea because it can lead to overflow. We started to use objdump to analyze the code, but we didn't find any usage of the call system. This led us to think about using shell code injection. However, we didn't initially find a way to exploit the buffer with code due to the small size of the buffers and the padding between them. We read a lot to find different ways to inject shell code payloads into the program and finally found a way through environment variables. This is described here: https://dhavalkapil.com/blogs/Shellcode-Injection/.

But we still needed to find a way to execute our payload. Using [this buffer overflow pattern generator](https://wiremask.eu/tools/buffer-overflow-pattern-generator/) to generate a pattern, we found that the second buffer has potential injection at offset 9 when the first buffer is full.

We started to use gdb to find a way to get the address of the environment variable because we needed to know the value to override the EIP pointer. It must be in the `SHELLCODE` environment variable. Sadly, when we tried to execute the payload, it seemed something blocked us from identifying as bonus1. We supposed that gdb blocked this, so we tried to execute the same payload without using it. And surprise, it failed! But why? The reason is that the environment between gdb and execution from the shell doesn't load the same environment. We finally found a trick using a C program to print the memory address and get the full payload in the shell environment.


```bash
bonus0@RainFall:~$ (python -c "print 'A'*200" ; python -c "print 9 * 'A' + '\xcc\xd9\xff\xbf' + 40 * 'A'";cat) | ./bonus0
 -
 -
AAAAAAAAAAAAAAAAAAAAAAAAAAAAA�AAAAAAA� AAAAAAAAA�AAAAAAA�
whoami
bonus1
cat /home/user/bonus1/.pass
cd1f77a585965341c37a1774a1d1686326e1fc53aaa5459c840409d4d06523c9
```